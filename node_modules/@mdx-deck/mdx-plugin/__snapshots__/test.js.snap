// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`adds an export 1`] = `
"/* @jsx mdx */

export const slides = [(props => {
  const __MDXDECK_LAYOUT__ = props =>
  <section>
    {props.children}
  </section>
  return <__MDXDECK_LAYOUT__
    name=\\"wrapper\\"
    components={props.components}>
    

    <h1>{\`Hello\`}</h1>
  </__MDXDECK_LAYOUT__>
}),
(props => {
  const __MDXDECK_LAYOUT__ = \\"div\\"
  return <__MDXDECK_LAYOUT__
    name=\\"wrapper\\"
    components={props.components}>
    <h2>{\`Two\`}</h2>
  </__MDXDECK_LAYOUT__>
}),
(props => {
  const __MDXDECK_LAYOUT__ = \\"div\\"
  return <__MDXDECK_LAYOUT__
    name=\\"wrapper\\"
    components={props.components}>
    <h2>{\`Three\`}</h2>
  </__MDXDECK_LAYOUT__>
})]
const makeShortcode = name => function MDXDefaultShortcode(props) {
  console.warn(\\"Component \\" + name + \\" was not imported, exported, or provided by MDXProvider as global scope\\")
  return <div {...props}/>
};

const layoutProps = {
  slides
};
const MDXLayout = props =>
  <section>
    {props.children}
  </section>
export default \\"use strict\\";

var _core = require(\\"@emotion/core\\");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, [\\"components\\"]);

  return (0, _core.jsx)(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: \\"MDXLayout\\"
  }), (0, _core.jsx)(\\"h1\\", null, \\"Hello\\"), (0, _core.jsx)(\\"hr\\", null), (0, _core.jsx)(\\"h2\\", null, \\"Two\\"), (0, _core.jsx)(\\"hr\\", null), (0, _core.jsx)(\\"h2\\", null, \\"Three\\"));
}

MDXContent.isMDXComponent = true;"
`;
